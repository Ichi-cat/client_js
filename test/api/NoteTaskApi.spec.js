/*
 * Notes
 * Backend app with Notes and Notetasks
 *
 * OpenAPI spec version: 1.0
 * Contact: staske11111@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Notes);
  }
}(this, function(expect, Notes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Notes.NoteTaskApi();
  });

  describe('(package)', function() {
    describe('NoteTaskApi', function() {
      describe('createNoteTask', function() {
        it('should call createNoteTask successfully', function(done) {
          // TODO: uncomment, update parameter values for createNoteTask call and complete the assertions
          /*
          var opts = {};

          instance.createNoteTask(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNoteTask', function() {
        it('should call deleteNoteTask successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNoteTask call
          /*

          instance.deleteNoteTask(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNoteTaskById', function() {
        it('should call getNoteTaskById successfully', function(done) {
          // TODO: uncomment, update parameter values for getNoteTaskById call and complete the assertions
          /*

          instance.getNoteTaskById(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Notes.NoteTaskDetailsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNoteTaskByMatrix', function() {
        it('should call getNoteTaskByMatrix successfully', function(done) {
          // TODO: uncomment, update parameter values for getNoteTaskByMatrix call and complete the assertions
          /*

          instance.getNoteTaskByMatrix(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Notes.NoteTaskListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNoteTaskByProgressCondition', function() {
        it('should call getNoteTaskByProgressCondition successfully', function(done) {
          // TODO: uncomment, update parameter values for getNoteTaskByProgressCondition call and complete the assertions
          /*

          instance.getNoteTaskByProgressCondition(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Notes.NoteTaskListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNoteTasks', function() {
        it('should call getNoteTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNoteTasks call and complete the assertions
          /*

          instance.getNoteTasks(apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Notes.NoteTaskListDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNoteTask', function() {
        it('should call updateNoteTask successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNoteTask call
          /*
          var opts = {};

          instance.updateNoteTask(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNoteTaskPatch', function() {
        it('should call updateNoteTaskPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNoteTaskPatch call
          /*
          var opts = {};

          instance.updateNoteTaskPatch(id, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
